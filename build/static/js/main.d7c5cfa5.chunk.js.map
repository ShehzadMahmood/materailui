{"version":3,"sources":["NavBar.js","CircularProgressWithLabel.js","App.js","serviceWorker.js","index.js"],"names":["useStyles","makeStyles","theme","root","flexGrow","menuButton","marginRight","spacing","title","ButtonAppBar","classes","className","AppBar","position","Toolbar","IconButton","edge","color","aria-label","Typography","variant","CircularProgressWithLabel","props","Box","display","CircularProgress","top","left","bottom","right","alignItems","justifyContent","component","Math","round","value","CircularStatic","React","useState","progress","setProgress","useEffect","timer","setInterval","prevProgress","clearInterval","paper","width","margin","marginTop","textAlign","padding","input","marginBottom","App","Paper","elevation","noValidate","autoComplete","TextField","label","Button","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"qRAQMA,EAAYC,aAAW,SAACC,GAAD,MAAY,CACvCC,KAAM,CACJC,SAAU,GAEZC,WAAY,CACVC,YAAaJ,EAAMK,QAAQ,IAE7BC,MAAO,CACLJ,SAAU,OAIC,SAASK,IACtB,IAAMC,EAAUV,IAEhB,OACE,yBAAKW,UAAWD,EAAQP,MACtB,kBAACS,EAAA,EAAD,CAAQC,SAAS,UACf,kBAACC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAYC,KAAK,QAAQL,UAAWD,EAAQL,WAAYY,MAAM,UAAUC,aAAW,QACjF,kBAAC,IAAD,OAEF,kBAACC,EAAA,EAAD,CAAYC,QAAQ,KAAKT,UAAWD,EAAQF,OAA5C,sB,8BCxBV,SAASa,EAA0BC,GACjC,OACE,kBAACC,EAAA,EAAD,CAAKV,SAAS,WAAWW,QAAQ,eAC/B,kBAACC,EAAA,EAAD,eAAkBL,QAAQ,UAAaE,IACvC,kBAACC,EAAA,EAAD,CACEG,IAAK,EACLC,KAAM,EACNC,OAAQ,EACRC,MAAO,EACPhB,SAAS,WACTW,QAAQ,OACRM,WAAW,SACXC,eAAe,UAEf,kBAACZ,EAAA,EAAD,CAAYC,QAAQ,UAAUY,UAAU,MAAMf,MAAM,iBAApD,UAAwEgB,KAAKC,MAC3EZ,EAAMa,OADR,QAgBO,SAASC,IAAkB,IAAD,EACPC,IAAMC,SAAS,IADR,mBAChCC,EADgC,KACtBC,EADsB,KAYvC,OATAH,IAAMI,WAAU,WACd,IAAMC,EAAQC,aAAY,WACxBH,GAAY,SAACI,GAAD,OAAmBA,GAAgB,IAAM,GAAKA,EAAe,QACxE,KACH,OAAO,WACLC,cAAcH,MAEf,IAEI,kBAACrB,EAAD,CAA2Bc,MAAOI,I,8BC1CrCvC,EAAYC,aAAW,SAACC,GAAD,MAAY,CAEvC4C,MAAO,CACLC,MAAO,IACPC,OAAQ,SACRC,UAAW,KACXC,UAAW,SACXC,QAAS,MAGXC,MAAO,CACLL,MAAO,MACPM,aAAc,QA2BHC,MAvBf,WAEE,IAAM5C,EAAUV,IAEhB,OACE,yBAAKW,UAAWD,EAAQP,MACtB,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAACoD,EAAA,EAAD,CAAOC,UAAW,EAAG7C,UAAWD,EAAQoC,OACtC,qCACA,0BAAMnC,UAAWD,EAAQP,KAAMsD,YAAU,EAACC,aAAa,OACrD,kBAACC,EAAA,EAAD,CAAWC,MAAM,cAAcjD,UAAWD,EAAQ0C,QAClD,kBAACO,EAAA,EAAD,CAAWC,MAAM,iBAAiBjD,UAAWD,EAAQ0C,QACrD,kBAACS,EAAA,EAAD,CAAQzC,QAAQ,YAAYH,MAAM,UAAUN,UAAWD,EAAQ0C,OAA/D,UAIF,kBAAC3B,EAAA,EAAD,CAAkBU,MAAO,QC3Bb2B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.d7c5cfa5.chunk.js","sourcesContent":["import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\nimport IconButton from '@material-ui/core/IconButton';\nimport MenuIcon from '@material-ui/icons/Menu';\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    flexGrow: 1,\n  },\n  menuButton: {\n    marginRight: theme.spacing(2),\n  },\n  title: {\n    flexGrow: 1,\n  },\n}));\n\nexport default function ButtonAppBar() {\n  const classes = useStyles();\n\n  return (\n    <div className={classes.root}>\n      <AppBar position=\"static\">\n        <Toolbar>\n          <IconButton edge=\"start\" className={classes.menuButton} color=\"inherit\" aria-label=\"menu\">\n            <MenuIcon />\n          </IconButton>\n          <Typography variant=\"h6\" className={classes.title}>\n            Expense Builder\n          </Typography>\n        </Toolbar>\n      </AppBar>\n    </div>\n  );\n}\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport Typography from '@material-ui/core/Typography';\nimport Box from '@material-ui/core/Box';\n\nfunction CircularProgressWithLabel(props) {\n  return (\n    <Box position=\"relative\" display=\"inline-flex\">\n      <CircularProgress variant=\"static\" {...props} />\n      <Box\n        top={0}\n        left={0}\n        bottom={0}\n        right={0}\n        position=\"absolute\"\n        display=\"flex\"\n        alignItems=\"center\"\n        justifyContent=\"center\"\n      >\n        <Typography variant=\"caption\" component=\"div\" color=\"textSecondary\">{`${Math.round(\n          props.value,\n        )}%`}</Typography>\n      </Box>\n    </Box>\n  );\n}\n\nCircularProgressWithLabel.propTypes = {\n  /**\n   * The value of the progress indicator for the determinate and static variants.\n   * Value between 0 and 100.\n   */\n  value: PropTypes.number.isRequired,\n};\n\nexport default function CircularStatic() {\n  const [progress, setProgress] = React.useState(10);\n\n  React.useEffect(() => {\n    const timer = setInterval(() => {\n      setProgress((prevProgress) => (prevProgress >= 100 ? 10 : prevProgress + 10));\n    }, 800);\n    return () => {\n      clearInterval(timer);\n    };\n  }, []);\n\n  return <CircularProgressWithLabel value={progress} />;\n}\n","import React from 'react';\nimport NavBar from './NavBar';\nimport CircularProgressWithLabel from './CircularProgressWithLabel';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { Paper, TextField, Button, CircularProgress } from '@material-ui/core';\n\nconst useStyles = makeStyles((theme) => ({\n  \n  paper: {\n    width: 400,\n    margin: '0 auto',\n    marginTop: '50',\n    textAlign: 'center',\n    padding: '15',\n    \n  },\n  input: {\n    width: '95%',\n    marginBottom: 10,\n  },\n}));\n\nfunction App() {\n\n  const classes = useStyles();\n\n  return (\n    <div className={classes.root}>\n      <NavBar />\n      <CircularProgressWithLabel />\n      <Paper elevation={3} className={classes.paper}>\n        <h1>Login</h1>\n        <form className={classes.root} noValidate autoComplete=\"off\">\n          <TextField label=\"Enter Email\" className={classes.input}/>\n          <TextField label=\"Enter Password\" className={classes.input}/>\n          <Button variant=\"contained\" color=\"primary\" className={classes.input}>\n            Login\n          </Button>\n        </form>\n        <CircularProgress value={50} />\n      </Paper>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}